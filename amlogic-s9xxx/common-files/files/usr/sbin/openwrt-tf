#!/bin/bash
#========================================================================
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the make OpenWrt for Amlogic s9xxx tv box
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Description: Create TF/SD/USB remaining space partition
# Copyright (C) 2021- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Command: openwrt-tf
#========================================================================

# Set font color
blue_font_prefix="\033[94m"
purple_font_prefix="\033[95m"
green_font_prefix="\033[92m"
yellow_font_prefix="\033[93m"
red_font_prefix="\033[91m"
font_color_suffix="\033[0m"
INFO="[${blue_font_prefix}INFO${font_color_suffix}]"
STEPS="[${purple_font_prefix}STEPS${font_color_suffix}]"
SUCCESS="[${green_font_prefix}SUCCESS${font_color_suffix}]"
OPT="[${yellow_font_prefix}OPT${font_color_suffix}]"
ERROR="[${red_font_prefix}ERROR${font_color_suffix}]"

echo -e "${STEPS} Try to create a shared partition ..."

echo -ne "${STEPS} This operation will clear the data in the remaining space, are you sure to continue? y/n [y]\b\b"
read yn
case $yn in
n* | N*)
   echo -e "${ERROR} You aborted the operation!"
   exit 1
   ;;
esac

# Find the partition where root is located
ROOT_PTNAME=$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')
if [ "${ROOT_PTNAME}" == "" ]; then
   echo -e "${ERROR} Cannot find the partition corresponding to the root file system!"
   exit 1
fi

# Find the disk where the partition is located, only supports mmcblk?p? sd?? hd?? vd?? and other formats
case ${ROOT_PTNAME} in
mmcblk?p[1-4])
   DISK_NAME=$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-2)}')
   PT_PRE="${DISK_NAME}p"
   LB_PRE="EMMC_"
   ;;
[hsv]d[a-z][1-4])
   DISK_NAME=$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-1)}')
   PT_PRE="${DISK_NAME}"
   LB_PRE=""
   ;;
*)
   echo -e "${ERROR} Unable to recognize the disk type of ${ROOT_PTNAME}!"
   exit 1
   ;;
esac

# Get the starting position of the p3 partition
ROOTFS_MB=960
START_P3=$(fdisk -l | grep "${ROOT_PTNAME}" | sed -n '$p' | awk '{print $3}' | echo $(($(xargs) + 1)))
if [[ -z "${START_P3}" || -z "$(echo ${START_P3} | sed -n "/^[0-9]\+$/p")" ]]; then
   echo -e "${ERROR} Unable to get starting position!"
   exit 1
fi
END_P3=$((ROOTFS_MB * 2048 + START_P3 - 1))

TOTAL_SIZE=$(lsblk -l -b -o NAME,SIZE | awk "\$1 ~ /^${DISK_NAME}\$/ {print \$2}")
START_P4=$((END_P3 + 1))
END_P4=$((TOTAL_SIZE / 512 - 1))

cat >/tmp/fdisk.script <<EOF
n
p
3
$START_P3
$END_P3
Y
n
p
$START_P4
$END_P4
t
3
83
t
4
83
w
EOF
sync

echo -e "${STEPS} Fdisk starting ..."
fdisk /dev/${DISK_NAME} </tmp/fdisk.script 2>/dev/null
if [ $? -ne 0 ]; then
   echo -e "${ERROR} fdisk failed!"
   exit 1
fi
sync

echo -e "${STEPS} Create extended partition ..."
# Create the third partition
mkdir -p /mnt/${PT_PRE}3 && sync
mkfs.btrfs -f -L "${LB_PRE}ROOTFS2" "/dev/${PT_PRE}3"
mount -t btrfs -o compress=zstd:6 "/dev/${PT_PRE}3" "/mnt/${PT_PRE}3"
# Create the fourth partition
mkdir -p /mnt/${PT_PRE}4 && sync
mkfs.ext4 -F -L "${LB_PRE}SHARED" "/dev/${PT_PRE}4"
mount -t ext4 "/dev/${PT_PRE}4" "/mnt/${PT_PRE}4"
sync

echo -e "${STEPS} Init the docker config ..."
/etc/init.d/dockerd stop 2>/dev/null
/etc/init.d/dockerd disable 2>/dev/null
rm -rf "/opt/docker" 2>/dev/null && sync
mkdir -p /mnt/${PT_PRE}4/docker && sync
ln -sf "/mnt/${PT_PRE}4/docker/" "/opt/docker"
sync
if [ -f "/etc/config/dockerd" ]; then
   uci set dockerd.@globals[0].data_root="/mnt/${PT_PRE}4/docker/"
   uci commit dockerd
fi
cat >/etc/docker/daemon.json <<EOF
{
  "bip": "172.31.0.1/24",
  "data-root": "/mnt/${PT_PRE}4/docker/",
  "log-level": "warn",
  "log-driver": "json-file",
  "log-opts": {
     "max-size": "10m",
     "max-file": "5"
   },
  "registry-mirrors": [
     "https://docker.mirrors.ustc.edu.cn",
     "https://registry.cn-shanghai.aliyuncs.com",
     "https://hub-mirror.c.163.com"
   ]
}
EOF
sync
/etc/init.d/dockerd start 2>/dev/null
/etc/init.d/dockerd enable 2>/dev/null

echo -e "${SUCCESS} Create partition successfully"
rm -f /usr/sbin/openwrt-tf 2>/dev/null && sync
sync
exit 0
